<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lecture">
    
    <resultMap id="lectureMap" type="Lecture3">
        <id column="lecture_no" property="lectureNo"/>
        <result column="lecture_title" property="lectureTitle"/>
        <result column="lecture_order" property="lectureOrder"/>
        <result column="lecture_desc" property="lectureDesc"/>
        <result column="lecture_status" property="lectureStatus"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="course_no" property="courseNo"/>
        <!-- 연관된 일정 정보 -->
        <association property="scheduleEvent" resultMap="scheduleEventMap"/>
    </resultMap>
    
    <resultMap id="scheduleEventMap" type="ScheduleEvent3">
        <id column="event_no" property="eventNo"/>
        <result column="calendar_id" property="calendarId"/>
        <result column="event_category" property="eventCategory"/>
        <result column="event_title" property="eventTitle"/>
        <result column="event_start" property="eventStart"/>
        <result column="event_end" property="eventEnd"/>
        <result column="video_url" property="videoUrl"/>
        <result column="created_at" property="createdAt"/>
    </resultMap>
    
    <!-- 강좌별 강의 목록 조회 -->
    <select id="selectLecturesByCourseNo" parameterType="int" resultMap="lectureMap">
        SELECT L.*, 
               SE.event_no, SE.calendar_id, SE.event_category,
               SE.event_title, SE.event_start, SE.event_end,
               SE.video_url, SE.created_at as event_created_at
        FROM LECTURE3 L
        LEFT JOIN SCHEDULE_EVENT3 SE ON L.lecture_no = SE.lecture_no
        WHERE L.course_no = #{courseNo}
        ORDER BY L.lecture_order
	</select>
	
	<!-- 강의 일괄 등록 -->
	<insert id="insertLecturesBatch" parameterType="list">
		INSERT ALL
		<foreach collection="list" item="lecture">
			INTO LECTURE3 (
				LECTURE_NO,		LECTURE_TITLE,
				LECTURE_ORDER,	LECTURE_DESC,
				LECTURE_STATUS,	COURSE_NO,			
				CREATED_AT,		UPDATED_AT
			) VALUES (
				SEQ_LECTURE3_NO.NEXTVAL,	#{lecture.lectureTitle},
				#{lecture.lectureOrder},	#{lecture.lectureDesc},
				#{lecture.lectureStatus},	#{lecture.courseNo},
				SYSDATE,	SYSDATE
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>

	<!-- 일정 일괄 등록 -->
	<insert id="insertScheduleEventsBatch" parameterType="list">
		INSERT ALL
		<foreach collection="list" item="event">
			INTO SCHEDULE_EVENT3 (
				EVENT_NO,		
				LECTURE_NO,
				EVENT_TITLE,	EVENT_START,	EVENT_END,		VIDEO_URL,
				CALENDAR_ID,	EVENT_CATEGORY,		CREATED_AT
			) VALUES (
				SEQ_SCHEDULE_EVENT3_NO.NEXTVAL,
				(
				 SELECT 
					LECTURE_NO 
				 FROM 
				 	LECTURE3 
				 WHERE 
				 	COURSE_NO = #{event.courseNo}
				 AND 
				 	LECTURE_ORDER = #{event.lectureOrder}
			 	 <!-- AND CREATED_AT >= SYSDATE - 1/1440) --> <!-- 최근 1분 이내 데이터 -->
				), <!-- lectureOrder로 매칭 -->
				#{event.eventTitle},	#{event.eventStart},	#{event.eventEnd},		#{event.videoUrl},
				#{event.calendarId},	'time',		SYSDATE
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>
    
    <!-- 강의 등록 -->
    <insert id="insertLecture" parameterType="Lecture3">
        <selectKey keyProperty="lectureNo" resultType="int" order="BEFORE">
            SELECT SEQ_LECTURE3_NO.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO LECTURE3 (
            lecture_no, lecture_title, lecture_order,
            lecture_desc, lecture_status, course_no,
            created_at, updated_at
        ) VALUES (
            #{lectureNo}, #{lectureTitle}, #{lectureOrder},
            #{lectureDesc}, #{lectureStatus}, #{courseNo},
            SYSDATE, SYSDATE
        )
    </insert>
    
    <!-- 강의 일정 등록 -->
    <insert id="insertScheduleEvent" parameterType="ScheduleEvent3">
        <selectKey keyProperty="eventNo" resultType="int" order="BEFORE">
            SELECT SEQ_SCHEDULE_EVENT3_NO.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO SCHEDULE_EVENT3 (
            event_no, calendar_id, event_category,
            event_title, event_start, event_end,
            lecture_no, video_url, created_at
        ) VALUES (
            #{eventNo}, #{calendarId}, 'time',
            #{eventTitle}, #{eventStart}, #{eventEnd},
            #{lectureNo}, #{videoUrl}, SYSDATE
        )
    </insert>
    
    <!-- 강의 수정 -->
    <update id="updateLecture" parameterType="Lecture3">
        UPDATE LECTURE3 SET
            lecture_title = #{lectureTitle},
            lecture_order = #{lectureOrder},
            lecture_desc = #{lectureDesc},
            lecture_status = #{lectureStatus},
            updated_at = SYSDATE
        WHERE lecture_no = #{lectureNo}
    </update>
    
    <!-- 일정 수정 -->
	<update id="updateScheduleEvent" parameterType="ScheduleEvent3">
        UPDATE SCHEDULE_EVENT3 SET
            event_title = #{eventTitle},
            event_start = #{eventStart},
            event_end = #{eventEnd},
            video_url = #{videoUrl}
        WHERE lecture_no = #{lectureNo}
    </update>
    
    <!-- 강의 삭제 (cascade 설정되어 있다고 가정) -->
    <delete id="deleteLecture" parameterType="int">
        DELETE FROM LECTURE3 WHERE lecture_no = #{lectureNo}
    </delete>
    
    <!-- 강의 일정 조회 -->
    <select id="selectScheduleEventByLectureNo" parameterType="int" resultMap="scheduleEventMap">
        SELECT * FROM SCHEDULE_EVENT3 WHERE lecture_no = #{lectureNo}
    </select>
    
	<!-- 학생의 수강 강좌 일정 조회 -->
	<select id="selectEventsByStudentNo" parameterType="int" resultType="map">
		SELECT 
			SE.EVENT_NO, SE.EVENT_TITLE, SE.EVENT_START, SE.EVENT_END, SE.VIDEO_URL, 
			L.LECTURE_TITLE, 
			C.COURSE_NO, C.COURSE_TITLE,
			T.TEACHER_SUBJECT, 
			M.MEMBER_NAME 
				as TEACHER_NAME
		FROM 
			SCHEDULE_EVENT3 SE
			JOIN LECTURE3 	L ON SE.LECTURE_NO = L.LECTURE_NO
			JOIN COURSE3 	C ON L.COURSE_NO = C.COURSE_NO
			JOIN COURSE_REGISTER3 CR ON C.COURSE_NO = CR.COURSE_NO
			JOIN MEMBER3 	M ON C.MEMBER_NO = M.MEMBER_NO
			JOIN TEACHERS3 	T ON M.MEMBER_NO = T.MEMBER_NO
		WHERE
			CR.MEMBER_NO = #{memberNo}
			AND C.GRADE = #{grade}
			AND CR.COMPLETION_STATUS != 2  -- 수료되지 않은 강좌만
		ORDER BY 
			SE.EVENT_START
	</select>
	
	<!-- 교사의 강좌 일정 조회 -->
	<select id="selectEventsByTeacherNo" parameterType="int" resultType="map">
		SELECT 
			SE.EVENT_NO, SE.EVENT_TITLE, SE.EVENT_START, SE.EVENT_END, SE.VIDEO_URL, 
			L.LECTURE_TITLE, 
			C.COURSE_NO, C.COURSE_TITLE,
			T.TEACHER_SUBJECT, 
			M.MEMBER_NAME 
				as TEACHER_NAME
		FROM 
			SCHEDULE_EVENT3 SE
			JOIN LECTURE3 L ON SE.LECTURE_NO = L.LECTURE_NO
			JOIN COURSE3 C ON L.COURSE_NO = C.COURSE_NO
			JOIN MEMBER3 M ON C.MEMBER_NO = M.MEMBER_NO
			JOIN TEACHERS3 T ON M.MEMBER_NO = T.MEMBER_NO
		WHERE 
			C.MEMBER_NO = #{memberNo}
		ORDER BY 
			SE.EVENT_START
	</select>
	
	<!-- 학년별 강의 일정 조회 -->
	<select id="selectEventsByGrade" parameterType="map" resultType="map">
	    SELECT 
	        SE.EVENT_NO, SE.EVENT_TITLE, SE.EVENT_START, SE.EVENT_END, SE.VIDEO_URL,
	        L.LECTURE_TITLE,
	        C.COURSE_NO, C.COURSE_TITLE,
	        T.TEACHER_SUBJECT,
	        M.MEMBER_NAME as TEACHER_NAME
	    FROM 
	        SCHEDULE_EVENT3 SE
	        JOIN LECTURE3 L ON SE.LECTURE_NO = L.LECTURE_NO
	        JOIN COURSE3 C ON L.COURSE_NO = C.COURSE_NO
	        JOIN MEMBER3 M ON C.MEMBER_NO = M.MEMBER_NO
	        JOIN TEACHERS3 T ON M.MEMBER_NO = T.MEMBER_NO
	    WHERE 
	        C.GRADE = #{grade}
	        AND SE.EVENT_START >= SYSDATE - 7  -- 일주일 전부터의 일정만 조회
	        AND SYSDATE + 30 >= SE.EVENT_END   -- 한달 후까지의 일정만 조회
	    ORDER BY 
	        SE.EVENT_START
	</select>
</mapper>
