<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="course">
	<resultMap id="courseMap" type="Course3">
		<id column="course_no" property="courseNo"/>
		<result column="course_title" property="courseTitle"/>
		<result column="course_desc" property="courseDesc"/>
		<result column="course_category_no" property="courseCategoryNo"/>
		<result column="grade" property="grade"/>
		<result column="course_price" property="coursePrice"/>
		<result column="course_price_sale" property="coursePriceSale"/>
		<result column="course_period" property="coursePeriod"/>
		<result column="course_status" property="courseStatus"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="begin_date" property="beginDate"/>
		<result column="end_date" property="endDate"/>
		<result column="total_lectures" property="totalLectures"/>
		<result column="member_no" property="memberNo"/>
		
		<result column="member_name" property="teacherName"/>
		<result column="teacher_subject_name" property="teacherSubjectName"/>
		<result column="teacher_info_title" property="teacherInfoTitle"/>
		<result column="course_category_title" property="courseCategoryTitle"/>
		<result column="course_category_desc" property="courseCategoryDesc"/>
		<result column="student_count" property="studentCount"/>
	</resultMap>
	<!-- 카테고리 조회를 위한 resultMap -->
	<resultMap id="categoryMap" type="Course3">
		<id column="course_category_no" property="courseCategoryNo"/>
		<result column="course_category_title" property="courseCategoryTitle"/>
		<result column="course_category_desc" property="courseCategoryDesc"/>
	</resultMap>
	
	<!-- 카테고리 목록 조회 -->
	<select id="selectAllCategories" resultType="string">
	    SELECT COURSE_CATEGORY_TITLE
	    FROM COURSE_CATEGORY3
	    ORDER BY COURSE_CATEGORY_NO
	</select>
		
	<!-- 새 강좌 등록 로직 -->
	<insert id="insertNewCourse" parameterType="Course3">
		INSERT INTO COURSE3 (
			COURSE_NO, 				
			COURSE_TITLE, 	COURSE_DESC, 	COURSE_CATEGORY_NO,  GRADE, 
			COURSE_PRICE,	COURSE_PRICE_SALE,	BEGIN_DATE,		CREATED_AT,	   MEMBER_NO
		) VALUES (
			SEQ_COURSE3_NO.NEXTVAL, 
			#{courseTitle},	#{courseDesc},	#{courseCategoryNo}, #{grade},
			#{coursePrice},	#{coursePriceSale},	#{beginDate},	#{createdAt},  #{memberNo}
		)
		
	</insert>
	
	<select id="selectCourseByNo" parameterType="int" resultMap="courseMap">
		SELECT * FROM COURSE3 WHERE COURSE_NO=#{courseNo}
	</select>
	
	<select id="selectCourseBySubjectNo" parameterType="map" resultMap="courseMap">
		SELECT C.*,
				I.IMG_NO,  S.TEACHER_SUBJECT_NAME
		FROM (SELECT ROWNUM AS RNUM, A.*
			  FROM (SELECT C.* 
			  		FROM COURSE3 C
			  			LEFT JOIN TEACHERS3 T ON C.MEMBER_NO = T.MEMBER_NO
             			LEFT JOIN SUBJECT3 S ON T.TEACHER_SUBJECT = S.TEACHER_SUBJECT
			  			WHERE S.TEACHER_SUBJECT_NAME = #{subjectName} AND C.GRADE = #{gradeNum}
			  			ORDER BY C.COURSE_NO DESC) A
			  		WHERE #{end} >= ROWNUM
			  ) C
		LEFT JOIN TEACHERS3 T ON C.MEMBER_NO = T.MEMBER_NO 
		LEFT JOIN MEMBER3 M ON C.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN IMAGE3 I ON M.MEMBER_NO = I.MEMBER_NO
		LEFT JOIN SUBJECT3 S ON T.TEACHER_SUBJECT = S.TEACHER_SUBJECT
		WHERE RNUM >= #{start}
	</select>
	
	<!-- 모든 강좌 상태 일괄 업데이트 -->
	<update id="updateAllCoursesStatus" parameterType="int">
		UPDATE COURSE3 
		SET 
			COURSE_STATUS = 
				CASE 
					/* 시작일이 없는 경우 준비중(0) */
					WHEN BEGIN_DATE IS NULL THEN 0
					/* 시작일이 미래인 경우 준비중(0) */
					WHEN BEGIN_DATE > SYSDATE THEN 0
					/* 종료일이 있고, 종료일이 지난 경우 완료(2) */
					WHEN END_DATE IS NOT NULL AND SYSDATE > END_DATE THEN 2
					/* 시작일이 지났고, 종료일이 없거나 진행중인 경우 진행중(1) */
					WHEN SYSDATE >= BEGIN_DATE AND (END_DATE IS NULL OR END_DATE >= SYSDATE) THEN 1
				END,
			UPDATED_AT = SYSDATE
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<!-- 강좌 상태 확인 및 업데이트 -->
	<update id="updateCourseStatus"  parameterType="int" >
		UPDATE COURSE3 
		SET COURSE_STATUS = 
			CASE 
				<!--	 시작일이 없는 경우 준비중(0) -->	
				WHEN BEGIN_DATE IS NULL THEN 0
				<!--	 시작일이 미래인 경우 준비중(0) Preparing-->	
				WHEN BEGIN_DATE > SYSDATE THEN 0
				<!--	 종료일이 있고, 종료일이 지난 경우 완료(2) Completed-->	
				WHEN END_DATE IS NOT NULL AND SYSDATE > END_DATE THEN 2
				<!--	 시작일이 지났고, 종료일이 없거나 진행중인 경우 진행중(1) InProgress-->	
				WHEN SYSDATE >= BEGIN_DATE AND (END_DATE IS NULL OR END_DATE >= SYSDATE) THEN 1
			END,
		UPDATED_AT = SYSDATE
		WHERE COURSE_NO = #{courseNo}
	</update>
	
	<!-- 특정 교사의 강좌 상태별 조회 -->
	<select id="selectCoursesByStatus" parameterType="map" resultMap="courseMap">
		SELECT * FROM COURSE3 
		WHERE MEMBER_NO = #{memberNo}
		<choose>
			<when test="status == 'preparing'">
				AND (COURSE_STATUS = 0 OR BEGIN_DATE > SYSDATE)
			</when>
			<when test="status == 'inProgress'">
				AND COURSE_STATUS = 1 
				AND (SYSDATE >= BEGIN_DATE)
				AND (END_DATE IS NULL OR END_DATE >= SYSDATE)
			</when>
			<when test="status == 'completed'">
				AND COURSE_STATUS = 2 
				AND SYSDATE > END_DATE
			</when>
		</choose>
		ORDER BY CREATED_AT DESC
	</select>
	
	<!-- 각 상태별 강좌 수 조회 -->
	<select id="selectCourseStatusCount" parameterType="int" resultType="map">
		SELECT 
	        COUNT(*) as TOTAL,
	        SUM(CASE 
	            WHEN COURSE_STATUS = 0 OR BEGIN_DATE > SYSDATE THEN 1 
	            ELSE 0 
	        END) as PREPARING,
	        SUM(CASE 
	            WHEN COURSE_STATUS = 1 
	            AND SYSDATE >= BEGIN_DATE 
	            AND (END_DATE IS NULL OR END_DATE >= SYSDATE) THEN 1 
	            ELSE 0 
	        END) as INPROGRESS,
	        SUM(CASE 
	            WHEN COURSE_STATUS = 2 
	            AND SYSDATE > END_DATE THEN 1 
	            ELSE 0 
	        END) as COMPLETED
	    FROM COURSE3
	    WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 교사의 강좌 목록 조회 (상태별 카운트 포함) -->
	<select id="selectCoursesByTeacher" parameterType="map"
		resultMap="courseMap">
		SELECT
			C.*,
			COUNT(*) OVER() 
				as total_count,
			SUM(CASE WHEN C.course_status = 0 THEN 1 ELSE 0 END) OVER() 
				as preparing_count,
			SUM(CASE WHEN C.course_status = 1 THEN 1 ELSE 0 END) OVER() 
				as in_progress_count,
			SUM(CASE WHEN C.course_status = 2 THEN 1 ELSE 0 END) OVER() 
				as completed_count
		FROM COURSE3 C
		WHERE C.member_no = #{memberNo}
		<if test="status != null and status != 'all'">
			AND (
			CASE
				WHEN #{status} = 'preparing'  THEN course_status = 0
				WHEN #{status} = 'inProgress' THEN course_status = 1
				WHEN #{status} = 'completed'  THEN course_status = 2
			END
			)
		</if>
		ORDER BY C.created_at DESC
	</select>	
	
	<!-- 학생이 수강 중인 강좌 번호 목록 조회 -->
	<select id="selectEnrolledCourseNos" parameterType="int" resultType="int">
	    SELECT COURSE_NO 
	    FROM COURSE_REGISTER3 
	    WHERE MEMBER_NO = #{memberNo}
	    AND COMPLETION_STATUS != 2
	</select>
	
	<!-- 교사가 가르치는 강좌 번호 목록 조회 -->
	<select id="selectTeachingCourseNos" parameterType="int" resultType="int">
	    SELECT COURSE_NO 
	    FROM COURSE3 
	    WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 학생이 수강 중인 강좌 목록 조회 -->
	<select id="selectStudentCourses" parameterType="_int" resultType="map">
		
	</select>
	
	<select id="selectMainCourses" resultMap="courseMap">
		WITH RandomCourses AS (
		    SELECT * 
		    FROM (
		        SELECT c.*, ROW_NUMBER() OVER (PARTITION BY c.COURSE_CATEGORY_NO ORDER BY DBMS_RANDOM.VALUE) AS rn
		        FROM COURSE3 c
		    )
		    WHERE  3 >= rn
		)
		SELECT C.COURSE_NO, C.COURSE_TITLE, C.COURSE_CATEGORY_NO, C.GRADE, C.COURSE_DESC, C.COURSE_PRICE, C.COURSE_PRICE_SALE,
	       M.MEMBER_NAME,  CR.COURSE_CATEGORY_DESC, CR.COURSE_CATEGORY_TITLE,
	       T.TEACHER_INFO_TITLE, S.TEACHER_SUBJECT_NAME, 
	       I.RENAMED
		FROM RandomCourses C
            LEFT JOIN COURSE_CATEGORY3 CR ON C.COURSE_CATEGORY_NO = CR.COURSE_CATEGORY_NO
			LEFT JOIN MEMBER3 M ON C.MEMBER_NO = M.MEMBER_NO
			LEFT JOIN TEACHERS3 T ON M.MEMBER_NO = T.MEMBER_NO
			LEFT JOIN SUBJECT3 S ON T.TEACHER_SUBJECT = S.TEACHER_SUBJECT
			LEFT JOIN IMAGE3 I ON T.IMG_NO = I.IMG_NO
		ORDER BY C.COURSE_NO
	</select>
</mapper>
